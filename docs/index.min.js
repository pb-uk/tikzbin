
let codeMirror;

function debounce(func, timeout = 300){
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => { func.apply(this, args); }, timeout);
  };
}

const sourceChanged = async () => {
  const scriptEl = document.createElement('script');
  scriptEl.innerHTML = codeMirror.doc.getValue();
  scriptEl.setAttribute('type', 'text/tikz');
  document.getElementById('rendered').replaceChildren(scriptEl);
  try {
    await window.onload();
    console.log('Rendered');
  } catch (err) {
    console.log('Could not render');
  }
};

var captureSvg = () => {
  const svg = document.getElementById('rendered').firstChild.innerHTML;
  const base64 = 'data:image/svg+xml;base64,' + btoa(svg.replace('<svg', '<?xml version="1.0" encoding="UTF-8" ?>\n<svg xmlns="http://www.w3.org/2000/svg"'));
  const downloadLink = document.createElement('a');
  downloadLink.href = base64;
  downloadLink.download = 'tikz.svg';
  downloadLink.click();
};

const onLoaded = () => {
  codeMirror = new CodeMirror(document.getElementById('editor'), {
    value: '\\begin{tikzpicture}\n  \\draw (0,0) circle (4cm);\n\\end{tikzpicture}',
    theme: 'base16-light',
    lineNumbers: true,
    tabSize: 2,
    mode: 'stex',
  });
  codeMirror.on('changes', debounce(sourceChanged, 1000));
};

const handleChange = (...args) => {
  console.log(args);
};

const waitForLoad = () => {
  console.log('Loading', window);
  if (window.CodeMirror) {
    return onLoaded();
  }
  setTimeout(waitForLoad, 1000);
};

waitForLoad();
